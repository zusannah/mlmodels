CALCULATING PROBABILITIES OF N-GRAMS

def ngram_model(sequence, n):

"""Construct a dictionary with n-grams as keys and their probabilities as values.
Arguments:
sequence: a sequence (e.g., a string or list)
n: the size of the n-grams
Returns: a dictionary with n-grams as keys and their probabilities as values.
"""
# create a frequency dictionary

fd={}
# create a probability dictionary

pd={}

# compute all the n-grams from the `sequence` string

ngram_sequence = ngrams(sequence, n)

# fill the frequency dictionary

for ngram in ngram_sequence:
fd[ngram]=fd.get(ngram, 0)+1

# transform the frequencies to probabilities
total=sum(fd.values()) # sum of frequencies

for ngram, frequency in fd.items():
pd[ngram]=fd[ngram]/total

return(pd)

CALCULATING PROBABILITIES FOR NEW LANGUAGES

pc3g = ngram_model(poirot_characters, 3)
pc3gs = sorted(pc3g.items(), key=lambda x: x[1], reverse=True)
print("Poirot:")
for i in pc3gs[:10]:
print(i)
pa3g = ngram_model(pauline_characters, 3)
pa3gs = sorted(pa3g.items(), key=lambda x: x[1], reverse=True)
print("Pauline:")
for i in pa3gs[:10]:
print(i)


english_model = ngram_model(poirot_characters, 3)
french_model = ngram_model(pauline_characters, 3)
